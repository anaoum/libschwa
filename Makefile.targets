.PHONY: all apps clean depends doxygen install libschwa release tests test wc

all: libschwa apps

echo-%:
	@echo '$*=$($*)'


# ===============================================================================
# Third party things needed for basic compilation and linking.
# ===============================================================================
RAGEL = ragel
RAGEL_CXXFLAGS = -w

RAGEL_GENERATED_SOURCES = src/lib/schwa/tokenizer/tokenizer.cc
$(RAGEL_GENERATED_SOURCES:.cc=.o): CXXFLAGS += $(RAGEL_CXXFLAGS)

LIBZMQ_CPPFLAGS = $(shell pkg-config --cflags-only-I libzmq)
LIBZMQ_CXXFLAGS = $(shell pkg-config --cflags-only-other libzmq)
LIBZMQ_LDFLAGS = $(shell pkg-config --libs libzmq)


# ===============================================================================
# Dependencies for libschwa
# ===============================================================================
LIBSCHWA_LIBS = \
		libs/libschwa.a \
		libs/libschwa.$(PLATFORM_SHARED_LIB_SUFFIX)

LIBSCHWA_BASE_OBJECTS = \
		src/lib/schwa/exception.o \
		src/lib/schwa/version.o
LIBSCHWA_CONFIG_OBJECTS = \
		src/lib/schwa/config/base.o \
		src/lib/schwa/config/group.o \
		src/lib/schwa/config/main.o \
		src/lib/schwa/config/serialisation.o \
		src/lib/schwa/config/op.o
LIBSCHWA_DR_OBJECTS = \
		src/lib/schwa/dr/config.o \
		src/lib/schwa/dr/field_defs.o \
		src/lib/schwa/dr/reader.o \
		src/lib/schwa/dr/runtime.o \
		src/lib/schwa/dr/schema.o \
		src/lib/schwa/dr/type_info.o \
		src/lib/schwa/dr/writer.o
LIBSCHWA_IO_OBJECTS = \
		src/lib/schwa/io/array_reader.o \
		src/lib/schwa/io/file_source.o \
		src/lib/schwa/io/istream_source.o \
		src/lib/schwa/io/logging.o \
		src/lib/schwa/io/mmapped_source.o \
		src/lib/schwa/io/write_buffer.o
LIBSCHWA_MSGPACK_OBJECTS = \
		src/lib/schwa/msgpack/dynamic.o \
		src/lib/schwa/msgpack/enums.o \
		src/lib/schwa/msgpack/exception.o \
		src/lib/schwa/msgpack/wire.o
LIBSCHWA_TOKENIZER_OBJECTS = \
		src/lib/schwa/tokenizer/debug_text_stream.o \
		src/lib/schwa/tokenizer/docrep_stream.o \
		src/lib/schwa/tokenizer/text_stream.o \
		src/lib/schwa/tokenizer/tokenizer.o
LIBSCHWA_UTILS_OBJECTS = \
		src/lib/schwa/utils/shlex.o

LIBSCHWA_OBJECTS = \
		$(LIBSCHWA_BASE_OBJECTS) \
		$(LIBSCHWA_CONFIG_OBJECTS) \
		$(LIBSCHWA_DR_OBJECTS) \
		$(LIBSCHWA_IO_OBJECTS) \
		$(LIBSCHWA_MSGPACK_OBJECTS) \
		$(LIBSCHWA_PORT_OBJECTS) \
		$(LIBSCHWA_TOKENIZER_OBJECTS) \
		$(LIBSCHWA_UTILS_OBJECTS)

$(LIBSCHWA_LIBS): $(LIBSCHWA_OBJECTS)

src/lib/schwa/tokenizer/tokenizer.cc: src/ragel/tokenizer.rl src/ragel/rules/*.rl
	$(RAGEL) -G2 -o $@ $<

src/lib/schwa/version.o: .force
ifdef RELEASE_VERSION
src/lib/schwa/version.o: CPPFLAGS += -DLIBSCHWA_VERSION='"$(RELEASE_VERSION) (release)"'
else
src/lib/schwa/version.o: CPPFLAGS += -DLIBSCHWA_VERSION='"git: $(shell git log --pretty=format:%h -n 1) (develop)"'
endif


LIBSCHWA_CPPFLAGS = -Isrc/lib $(PLATFORM_CPPFLAGS)
LIBSCHWA_CXXFLAGS = -std=c++11 -fPIC -W -Wall -Wextra -Werror -pedantic $(PLATFORM_CXXCFLAGS)
LIBSCHWA_LDFLAGS = $(PLATFORM_LDFLAGS)

ifdef RELEASE_VERSION
LIBSCHWA_CXXFLAGS += -O4
else
LIBSCHWA_CXXFLAGS += -g -O0
LIBSCHWA_LDFLAGS += -lprofiler -ltcmalloc
endif

$(LIBSCHWA_OBJECTS): CPPFLAGS += $(LIBSCHWA_CPPFLAGS)
$(LIBSCHWA_OBJECTS): CXXFLAGS += $(LIBSCHWA_CXXFLAGS)
$(LIBSCHWA_OBJECTS): LDFLAGS += $(LIBSCHWA_LDFLAGS)

libs/libschwa.$(PLATFORM_SHARED_LIB_SUFFIX): LDFLAGS += $(PLATFORM_SHARED_LIB_LDFLAGS)

libs/libschwa.a:
	$(AR) rcs $@ $^

libs/libschwa.$(PLATFORM_SHARED_LIB_SUFFIX):
	$(CXX) -o $@ $^ $(LDFLAGS)


# ===============================================================================
# Dependencies for apps
# ===============================================================================
APPS = \
		bin/dr \
		bin/dr-count \
		bin/dr-dist \
		bin/dr-head \
		bin/dr-tail \
		bin/dr-ui \
		bin/drworker \
		bin/tokenizer

APP__DR__DEPS =
APP__DR__OBJECTS = src/apps/schwa/dr/main.o $(APP__DR__DEPS)
bin/dr: $(APP__DR__OBJECTS)

APP__DR_COUNT__DEPS = src/apps/schwa/dr-count/processor.o
APP__DR_COUNT__OBJECTS = src/apps/schwa/dr-count/main.o $(APP__DR_COUNT__DEPS)
bin/dr-count: $(APP__DR_COUNT__OBJECTS)

APP__DR_DIST__DEPS = src/apps/schwa/dr-dist/helpers.o
APP__DR_DIST__OBJECTS = src/apps/schwa/dr-dist/main.o $(APP__DR_DIST__DEPS)
bin/dr-dist: $(APP__DR_DIST__OBJECTS)

APP__DR_HEAD__DEPS =
APP__DR_HEAD__OBJECTS = src/apps/schwa/dr-head/main.o $(APP__DR_HEAD__DEPS)
bin/dr-head: $(APP__DR_HEAD__OBJECTS)

APP__DR_TAIL__DEPS =
APP__DR_TAIL__OBJECTS = src/apps/schwa/dr-tail/main.o $(APP__DR_TAIL__DEPS)
bin/dr-tail: $(APP__DR_TAIL__OBJECTS)

APP__DR_UI__DEPS = src/apps/schwa/dr-ui/processor.o
APP__DR_UI__OBJECTS = src/apps/schwa/dr-ui/main.o $(APP__DR_UI__DEPS)
bin/dr-ui: $(APP__DR_UI__OBJECTS)

APP__DRWORKER_DEPS =
APP__DRWORKER__OBJECTS = src/apps/schwa/drworker/main.o $(APP__DRWORKER_DEPS) $(APP__DR_DIST__DEPS)
bin/drworker: $(APP__DRWORKER__OBJECTS)

APP__TOKENIZER__DEPS =
APP__TOKENIZER__OBJECTS = src/apps/schwa/tokenizer/main.o $(APP__TOKENIZER__DEPS)
bin/tokenizer: $(APP__TOKENIZER__OBJECTS)

APPS_OBJECTS = $(sort \
		$(APP__DR__OBJECTS) \
		$(APP__DR_COUNT__OBJECTS) \
		$(APP__DR_DIST__OBJECTS) \
		$(APP__DR_HEAD__OBJECTS) \
		$(APP__DR_TAIL__OBJECTS) \
		$(APP__DR_UI__OBJECTS) \
		$(APP__DRWORKER__OBJECTS) \
		$(APP__TOKENIZER__OBJECTS) \
		)


APPS_CPPFLAGS = -Isrc/apps
APPS_CXXFLAGS =
APPS_LDFLAGS = -Llibs

APPS_FULL_CPPFLAGS = $(APPS_CPPFLAGS) $(LIBSCHWA_CPPFLAGS)
APPS_FULL_CXXFLAGS = $(APPS_CXXFLAGS) $(LIBSCHWA_CXXFLAGS)
APPS_FULL_LDFLAGS = $(APPS_LDFLAGS) $(LIBSCHWA_LDFLAGS)

$(APPS_OBJECTS): CPPFLAGS += $(APPS_FULL_CPPFLAGS)
$(APPS_OBJECTS): CXXFLAGS += $(APPS_FULL_CXXFLAGS)
$(APPS): LDFLAGS += $(APPS_FULL_LDFLAGS)


APPS_REQUIRING_LIBZMQ = \
		bin/dr-dist \
		bin/drworker
APPS_OBJECTS_REQUIRING_LIBZMQ = $(sort \
		$(APP__DR_DIST__OBJECTS) \
		$(APP__DRWORKER__OBJECTS) \
		)

$(APPS_OBJECTS_REQUIRING_LIBZMQ): CPPFLAGS += $(LIBZMQ_CPPFLAGS)
$(APPS_OBJECTS_REQUIRING_LIBZMQ): CXXFLAGS += $(LIBZMQ_CXXFLAGS)
$(APPS_REQUIRING_LIBZMQ): LDFLAGS += $(LIBZMQ_LDFLAGS)


$(APPS): libs/libschwa.a

$(APPS):
	$(CXX) -o $@ $^ $(LDFLAGS)


# ===============================================================================
# Dependencies for unit tests
# ===============================================================================
UNITTESTS = bin/unittests

UNITTESTS_OBJECTS = \
		src/apps/schwa/unittests/main.o \
		src/lib/schwa/unittest.o \
		src/lib/schwa/pool_test.o \
		src/lib/schwa/port_test.o \
		src/lib/schwa/containers/block_vector_test.o \
		src/lib/schwa/dr/lazy_test.o \
		src/lib/schwa/dr/helpers_test.o \
		src/lib/schwa/dr/pointers_test.o \
		src/lib/schwa/dr/reader_test.o \
		src/lib/schwa/dr/self_pointer_test.o \
		src/lib/schwa/dr/slices_test.o \
		src/lib/schwa/dr/writer_test.o \
		src/lib/schwa/io/mmapped_source_test.o \
		src/lib/schwa/io/write_buffer_test.o \
		src/lib/schwa/mpl/if_test.o \
		src/lib/schwa/msgpack/wire_test.o \
		src/lib/schwa/utils/shlex_test.o

libs/libUnitTest++.a:
	cd third_party/UnitTest++; $(MAKE) $(MFLAGS)

UNITTESTS_CPPFLAGS = -isystem third_party/UnitTest++
UNITTESTS_CXXFLAGS =
UNITTESTS_LDFLAGS =

UNITTESTS_FULL_CPPFLAGS = $(LIBSCHWA_CPPFLAGS) $(UNITTESTS_CPPFLAGS)
UNITTESTS_FULL_CXXFLAGS = $(LIBSCHWA_CXXFLAGS) $(UNITTESTS_CXXFLAGS)
UNITTESTS_FULL_LDFLAGS = $(LIBSCHWA_LDFLAGS) $(UNITTESTS_LDFLAGS)

$(UNITTESTS_OBJECTS): CPPFLAGS += $(UNITTESTS_FULL_CPPFLAGS)
$(UNITTESTS_OBJECTS): CXXFLAGS += $(UNITTESTS_FULL_CXXFLAGS)
$(UNITTESTS_OBJECTS): LDFLAGS += $(UNITTESTS_FULL_LDFLAGS)

$(UNITTESTS): $(UNITTESTS_OBJECTS) libs/libUnitTest++.a libs/libschwa.a
	$(CXX) -o $@ $^ $(LDFLAGS)


# ===============================================================================
# PHONY targets
# ===============================================================================
apps: $(APPS)

clean:
	-find bin -type f -exec rm -f {} \;
	-find libs -type f -exec rm -f {} \;
	-find src -name "*.o" -exec rm -f {} \;

depends:
	src/scripts/make-depends > Makefile.depends

doxygen:
	doxygen docs/Doxyfile

install:
	src/scripts/make-install

libschwa: $(LIBSCHWA_LIBS)

release:
	src/scripts/make-release

tests: $(UNITTESTS)

test: tests
	$(UNITTESTS)

wc:
	find src/{apps,lib} \( -name "*.cc" -or -name "*.h" \) | grep -v '_test\.cc' | grep -v ^src/lib/schwa/tokenizer/tokenizer.cc | xargs wc -l
	find src/api/python -name "*.py" | grep -v /ve/ | grep -v /tests/ | xargs wc -l
	find src/api/java -name "*.java" | xargs wc -l

.force:
