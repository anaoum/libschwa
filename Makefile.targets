SHELL = /bin/bash

BINARIES = bin/drdist bin/tokenizer
SHARED_LIBS = lib/libschwa.$(SHARED_LIB_SUFFIX)

BASE_OBJECTS = \
		src/lib/schwa/exception.o \
		src/lib/schwa/version.o
CONFIG_OBJECTS = \
		src/lib/schwa/config/base.o \
		src/lib/schwa/config/exception.o \
		src/lib/schwa/config/group.o \
		src/lib/schwa/config/main.o \
		src/lib/schwa/config/op.o
DR_OBJECTS = \
		src/lib/schwa/dr/config.o \
		src/lib/schwa/dr/field_defs.o \
		src/lib/schwa/dr/reader.o \
		src/lib/schwa/dr/runtime.o \
		src/lib/schwa/dr/schema.o \
		src/lib/schwa/dr/type_info.o \
		src/lib/schwa/dr/writer.o
IO_OBJECTS = \
		src/lib/schwa/io/array_reader.o \
		src/lib/schwa/io/file_source.o \
		src/lib/schwa/io/istream_source.o \
		src/lib/schwa/io/write_buffer.o
MSGPACK_OBJECTS = \
		src/lib/schwa/msgpack/exception.o \
		src/lib/schwa/msgpack/wire.o
TOKENIZER_OBJECTS = \
		src/lib/schwa/tokenizer/debug_text_stream.o \
		src/lib/schwa/tokenizer/docrep_stream.o \
		src/lib/schwa/tokenizer/text_stream.o \
		src/lib/schwa/tokenizer/tokenizer.o

OBJECTS = $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(TOKENIZER_OBJECTS)

UNIT_TEST_OBJECTS = \
		src/tests/unit_tests/main.o \
		src/tests/unit_tests/test_utils.o \
		src/tests/unit_tests/schwa/containers/block_vector.o \
		src/tests/unit_tests/schwa/dr/lazy.o \
		src/tests/unit_tests/schwa/dr/pointers.o \
		src/tests/unit_tests/schwa/dr/reader.o \
		src/tests/unit_tests/schwa/dr/self_pointer.o \
		src/tests/unit_tests/schwa/dr/slices.o \
		src/tests/unit_tests/schwa/dr/writer.o \
		src/tests/unit_tests/schwa/io/buffer.o \
		src/tests/unit_tests/schwa/msgpack/wire.o
UNIT_TEST_BINARY = bin/_unit_tests
TEST_BINARIES = $(UNIT_TEST_BINARY)

GENERATED_SOURCES = \
		src/lib/schwa/tokenizer/tokenizer.cc


.PHONY: all clean depends doxygen install lint release sharedlibs test wc src/lib/schwa/version.cc

all: $(BINARIES) $(SHARED_LIBS)

clean:
	-find src -name "*.gch" -exec rm -f {} \;
	-find src -name "*.o" -exec rm -f {} \;
	-find lib \( -name "*.$(SHARED_LIB_SUFFIX)" -or -name "*.so" \) -exec rm -f {} \;
	-rm -f $(BINARIES) $(TEST_BINARIES)

depends:
	src/scripts/depends "$(CXX) -std=c++11 -MM $(INCLUDE) $(PYTHON_INCLUDE) $(TEST_INCLUDE) $(DEFINES) $(PYAPI_INCLUDE)" `find src -name '*.cc' | grep -v ^src/lib/schwa/port` $(PORT_OBJECTS:%.o=%.cc) > Makefile.depends

doxygen:
	doxygen docs/Doxyfile

install:
	install -d -v $(DESTDIR)$(prefix)/{bin,include,lib}
	# install the header files
	for d in `find src/include -type d`; do \
		install -d -v $${d/src/$(DESTDIR)$(prefix)}; \
	done
	for f in `find src/include -type f -name '*.h'`; do \
		install -p -v $${f} $${f/src/$(DESTDIR)$(prefix)}; \
	done
	# install the shared libraries
	for f in $(SHARED_LIBS); do \
		install -p -v $${f} $(DESTDIR)$(prefix)/lib; \
	done
	# install the binaries
	for f in $(BINARIES); do \
		install -p -v $${f} $(DESTDIR)$(prefix)/bin; \
	done

lint:
	cpplint.py --filter=-readability/streams,-legal/copyright,-whitespace/line_length `find src/include -name '*.h'`
	cpplint.py --filter=-readability/streams,-legal/copyright,-whitespace/line_length `find src/lib -name '*.cc'`

release:
	src/scripts/make-release $(RELEASE_VERSION)

sharedlibs: $(SHARED_LIBS)

wc:
	find src/{include,lib,main} -name "*.cc" -or -name "*.h" | grep -v ^src/tests/ | grep -v ^src/lib/schwa/tokenizer/tokenizer.cc | xargs wc -l
	find src/api/python/ -name "*.py" | grep -v /ve/ | grep -v /tests/ | xargs wc -l
	find src/api/java/ -name "*.java" | xargs wc -l


# -------------------------------------------------------------------------------
# base targets
# -------------------------------------------------------------------------------
%.h.gch: %.h
	$(CXX) -x c++-header $(CXXFLAGS) -o $@ $<

bin/test: src/main/test.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS)
	$(CXX) $^ $(LDFLAGS) -o $@

bin/drdist: src/main/drdist.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS)
	$(CXX) $^ $(LDFLAGS) -lzmq -o $@

bin/tokenizer: src/main/tokenizer.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(TOKENIZER_OBJECTS)
	$(CXX) $^ $(LDFLAGS) -o $@

lib/libschwa.$(SHARED_LIB_SUFFIX): $(OBJECTS)
	$(CXX) $(SHARED_LIB_LDFLAGS) -o $@ $^ $(LIBS)

# -------------------------------------------------------------------------------
# generated sources
# -------------------------------------------------------------------------------
ifdef RELEASE_VERSION
src/lib/schwa/version.cc: .force
	@echo 'namespace schwa { const char *VERSION = "$(RELEASE_VERSION) (release)"; }' > $@
else
src/lib/schwa/version.cc: .force
	@echo 'namespace schwa { const char *VERSION = "git:' $(shell git log --pretty=format:'%h' -n 1) ' (develop)"; }' > $@
endif

src/lib/schwa/tokenizer/tokenizer.o: src/lib/schwa/tokenizer/tokenizer.cc
	$(CXX) $(RAGEL_CXXFLAGS) -c -o $@ $<

src/lib/schwa/tokenizer/tokenizer.cc: src/ragel/tokenizer.rl src/ragel/rules/*.rl
	$(RAGEL) -G2 -o $@ $<


# -------------------------------------------------------------------------------
# Testing
# -------------------------------------------------------------------------------
src/tests/unit_tests/%.o: src/tests/unit_tests/%.cc
	$(CXX) $(TEST_CXXFLAGS) -c -o $@ $<

$(UNIT_TEST_BINARY): $(UNIT_TEST_OBJECTS) lib/libschwa.$(SHARED_LIB_SUFFIX)
	$(CXX) $(UNIT_TEST_OBJECTS) $(LDFLAGS) $(TEST_LDFLAGS) -o $@

tests: $(UNIT_TEST_BINARY)

test: tests
	LD_LIBRARY_PATH=lib:ext/lib $(UNIT_TEST_BINARY)


.force:
