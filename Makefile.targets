SHELL = /bin/bash

BINARIES = \
		bin/drdist \
		bin/drui \
		bin/drworker \
		bin/tokenizer
SHARED_LIBS = \
		libs/libschwa.a \
		libs/libschwa.$(SHARED_LIB_SUFFIX)

BASE_OBJECTS = \
		src/lib/schwa/exception.o \
		src/lib/schwa/version.o
CONFIG_OBJECTS = \
		src/lib/schwa/config/base.o \
		src/lib/schwa/config/group.o \
		src/lib/schwa/config/main.o \
		src/lib/schwa/config/op.o
DR_OBJECTS = \
		src/lib/schwa/dr/config.o \
		src/lib/schwa/dr/field_defs.o \
		src/lib/schwa/dr/reader.o \
		src/lib/schwa/dr/runtime.o \
		src/lib/schwa/dr/schema.o \
		src/lib/schwa/dr/type_info.o \
		src/lib/schwa/dr/writer.o
IO_OBJECTS = \
		src/lib/schwa/io/array_reader.o \
		src/lib/schwa/io/file_source.o \
		src/lib/schwa/io/istream_source.o \
		src/lib/schwa/io/logging.o \
		src/lib/schwa/io/mmapped_source.o \
		src/lib/schwa/io/write_buffer.o
MSGPACK_OBJECTS = \
		src/lib/schwa/msgpack/dynamic.o \
		src/lib/schwa/msgpack/enums.o \
		src/lib/schwa/msgpack/exception.o \
		src/lib/schwa/msgpack/wire.o
TOKENIZER_OBJECTS = \
		src/lib/schwa/tokenizer/debug_text_stream.o \
		src/lib/schwa/tokenizer/docrep_stream.o \
		src/lib/schwa/tokenizer/text_stream.o \
		src/lib/schwa/tokenizer/tokenizer.o
UTILS_OBJECTS = \
		src/lib/schwa/utils/shlex.o

OBJECTS = $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(TOKENIZER_OBJECTS) $(UTILS_OBJECTS)

DRDIST_OBJECTS = \
		src/apps/schwa/drdist/helpers.o

UNIT_TEST_OBJECTS = \
		src/apps/schwa/unit_tests/main.o \
		src/lib/schwa/unittest.o \
		src/lib/schwa/pool_test.o \
		src/lib/schwa/containers/block_vector_test.o \
		src/lib/schwa/dr/lazy_test.o \
		src/lib/schwa/dr/helpers_test.o \
		src/lib/schwa/dr/pointers_test.o \
		src/lib/schwa/dr/reader_test.o \
		src/lib/schwa/dr/self_pointer_test.o \
		src/lib/schwa/dr/slices_test.o \
		src/lib/schwa/dr/writer_test.o \
		src/lib/schwa/io/mmapped_source_test.o \
		src/lib/schwa/io/write_buffer_test.o \
		src/lib/schwa/mpl/if_test.o \
		src/lib/schwa/msgpack/wire_test.o \
		src/lib/schwa/utils/shlex_test.o
UNIT_TEST_BINARY = bin/unit_tests
TEST_BINARIES = $(UNIT_TEST_BINARY)

TEST_INCLUDE = -isystem third_party/UnitTest++
TEST_CXXFLAGS = $(TEST_INCLUDE)
TEST_LDFLAGS =


GENERATED_SOURCES = \
		src/lib/schwa/tokenizer/tokenizer.cc


.PHONY: all clean depends doxygen install release sharedlibs test wc

all: $(BINARIES) $(SHARED_LIBS)

clean:
	-find src -name "*.o" -exec rm -f {} \;
	-rm -f libs/*.{a,dylib,so}
	-rm -f $(BINARIES) $(TEST_BINARIES)

depends:
	src/scripts/make-depends "$(CXX) -MM $(CXXFLAGS) $(PYTHON_INCLUDE) $(TEST_INCLUDE) $(PYAPI_INCLUDE)" `find src -name '*.cc' | grep -v ^src/lib/schwa/port` $(PORT_OBJECTS:%.o=%.cc) > Makefile.depends

doxygen:
	doxygen docs/Doxyfile

install:
	install -d -v $(DESTDIR)$(prefix)/{bin,lib}
	# Install the header files.
	for d in `find src/lib -type d`; do \
		install -d -v $${d/src/$(DESTDIR)$(prefix)}; \
	done
	for f in `find src/lib -type f -name '*.h'`; do \
		install -p -v $${f} $${f/src/$(DESTDIR)$(prefix)}; \
	done
	# Install the shared libraries.
	for f in $(SHARED_LIBS); do \
		install -p -v $${f} $(DESTDIR)$(prefix)/lib; \
	done
	# Install the binaries.
	for f in $(BINARIES); do \
		install -p -v $${f} $(DESTDIR)$(prefix)/bin; \
	done

release:
	src/scripts/make-release $(RELEASE_VERSION)

sharedlibs: $(SHARED_LIBS)

wc:
	find src/{apps,lib} -name "*.cc" -or -name "*.h" | grep -v '_test\.cc' | grep -v ^src/lib/schwa/tokenizer/tokenizer.cc | xargs wc -l
	find src/api/python/ -name "*.py" | grep -v /ve/ | grep -v /tests/ | xargs wc -l
	find src/api/java/ -name "*.java" | xargs wc -l


# -------------------------------------------------------------------------------
# Base targets.
# -------------------------------------------------------------------------------
%.h.gch: %.h
	$(CXX) -x c++-header $(CXXFLAGS) -o $@ $<

bin/test: src/apps/schwa/test/main.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(UTILS_OBJECTS)
	$(CXX) $^ $(LDFLAGS) $(LIBS_LDFLAGS) -o $@

bin/drdist: src/apps/schwa/drdist/main.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DRDIST_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(UTILS_OBJECTS)
	$(CXX) $^ $(LDFLAGS) $(LIBS_LDFLAGS) $(LIBZMQ_LDFLAGS) -o $@

bin/drui: src/apps/schwa/drui/main.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(UTILS_OBJECTS)
	$(CXX) $^ $(LDFLAGS) $(LIBS_LDFLAGS) -o $@

bin/drworker: src/apps/schwa/drworker/main.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(DRDIST_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(UTILS_OBJECTS)
	$(CXX) $^ $(LDFLAGS) $(LIBS_LDFLAGS) $(LIBZMQ_LDFLAGS) -o $@

bin/tokenizer: src/apps/schwa/tokenizer/main.o $(BASE_OBJECTS) $(CONFIG_OBJECTS) $(DR_OBJECTS) $(IO_OBJECTS) $(MSGPACK_OBJECTS) $(PORT_OBJECTS) $(TOKENIZER_OBJECTS) $(UTILS_OBJECTS)
	$(CXX) $^ $(LDFLAGS) $(LIBS_LDFLAGS) -o $@

libs/libschwa.a: $(OBJECTS)
	ar rcs $@ $^

libs/libschwa.$(SHARED_LIB_SUFFIX): $(OBJECTS)
	$(CXX) $(SHARED_LIB_LDFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS_LDFLAGS)

# -------------------------------------------------------------------------------
# generated sources
# -------------------------------------------------------------------------------
ifdef RELEASE_VERSION
src/lib/schwa/version.cc: .force
	@echo 'namespace schwa { const char *VERSION = "$(RELEASE_VERSION) (release)"; }' > $@
else
src/lib/schwa/version.cc: .force
	@echo 'namespace schwa { const char *VERSION = "git:' $(shell git log --pretty=format:'%h' -n 1) ' (develop)"; }' > $@
endif

src/lib/schwa/tokenizer/tokenizer.o: src/lib/schwa/tokenizer/tokenizer.cc
	$(CXX) $(RAGEL_CXXFLAGS) -c -o $@ $<

src/lib/schwa/tokenizer/tokenizer.cc: src/ragel/tokenizer.rl src/ragel/rules/*.rl
	$(RAGEL) -G2 -o $@ $<


# -----------------------------------------------------------------------------
# third_party/UnitTest++_1.4
# -----------------------------------------------------------------------------
libs/libUnitTest++.a:
	cd third_party/UnitTest++; $(MAKE) $(MFLAGS)

libs/libUnitTest++.$(SHARED_LIB_SUFFIX):
	cd third_party/UnitTest++; $(MAKE) $(MFLAGS)


# -------------------------------------------------------------------------------
# Testing
# -------------------------------------------------------------------------------
$(UNIT_TEST_OBJECTS): CXXFLAGS += $(TEST_CXXFLAGS)
$(UNIT_TEST_OBJECTS): LDFLAGS += $(TEST_LDFLAGS)

$(UNIT_TEST_BINARY): $(UNIT_TEST_OBJECTS) libs/libUnitTest++.a libs/libschwa.a
	$(CXX) $^ $(LDFLAGS) $(LIBS_LDFLAGS) $(TEST_LDFLAGS) -o $@

tests: $(UNIT_TEST_BINARY)

test: tests
	$(UNIT_TEST_BINARY)


.force:
