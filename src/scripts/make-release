#!/usr/bin/env python
import os
import subprocess
import sys
import tempfile

PACKAGE = 'schwalab-tools'
VERSION = '0.0'
VERSION_MAJOR = '0'
VERSION_MINOR = '0'


def main(dirname):
  cwd = os.getcwd()
  src_dirname = '{0}_{1}'.format(PACKAGE, VERSION)
  tarball = '{0}_{1}.orig.tar.gz'.format(PACKAGE, VERSION)

  # discover git commit username and email
  git_user_name = subprocess.check_output(('git', 'config', 'user.name')).strip()
  git_user_email = subprocess.check_output(('git', 'config', 'user.email')).strip()
  if 'DEBFULLNAME' not in os.environ and git_user_name:
    os.environ['DEBFULLNAME'] = git_user_name
  if 'DEBEMAIL' not in os.environ and git_user_email:
    os.environ['DEBEMAIL'] = git_user_email

  # construct the source
  src_dir = os.path.join(dirname, src_dirname)
  os.mkdir(src_dir)
  subprocess.check_call(('cp', '-r', 'Makefile.targets', 'src', src_dir))

  # update the Makefile to make in release mode
  subprocess.check_call(r'''sed 's@^#RELEASE_VERSION_MAJOR=.*$@RELEASE_VERSION_MAJOR={0}@; s@^#*RELEASE_VERSION_MINOR=.*$@RELEASE_VERSION_MINOR={1}@; s@^#*\(RELEASE_VERSION=.*\)$@\1@' Makefile > {2}/Makefile'''.strip().format(VERSION_MAJOR, VERSION_MINOR, src_dir), shell=True)

  # construct the source tarball
  os.chdir(dirname)
  subprocess.check_call(('tar', 'zcf', tarball, src_dirname))

  # unpack the tarball
  os.chdir(src_dirname)

  # establish required directory structures
  os.mkdir('bin')
  os.mkdir('lib')
  os.mkdir('debian')
  os.mkdir('debian/source')

  # create debian/changelog
  subprocess.check_call(('dch', '--create', '-v', VERSION, '--package', PACKAGE))

  # create debian/compat
  with open('debian/compat', 'w') as f:
    print >> f, '8'

  # create debian/control
  with open('debian/control', 'w') as f:
    print >> f, '''
Source: {package}
Maintainer: Tim Dawborn <tim.dawborn@gmail.com>
Section: misc
Priority: optional
Standards-Version: 3.9.3
Build-Depends: debhelper (>= 8)

Package: {package}
Architecture: any
Depends: ${{shlibs:Depends}}, ${{misc:Depends}}, g++ (>= 4.7)
Description: Schwa-Lab Tools
\thttp://schwa.org/
\thttp://schwa.org/projects/schwa/
'''.strip().format(package=PACKAGE)

  # create debian/rules
  with open('debian/rules', 'w') as f:
    print >> f, '''
#!/usr/bin/make -f
%:
\tdh $@
'''.strip()

  # create debian/source/format
  with open('debian/source/format', 'w') as f:
    print >> f, '3.0 (quilt)'

  # build the deb file
  subprocess.check_call(('debuild', '-us', '-uc'))

  # copy it back to the original directory
  subprocess.check_call(('cp', '../{0}_{1}_amd64.deb'.format(PACKAGE, VERSION), cwd))


if __name__ == '__main__':
  try:
    VERSION_MAJOR, VERSION_MINOR = raw_input('Enter release version (#.#): ').strip().split('.')
    VERSION = VERSION_MAJOR + '.' + VERSION_MINOR
  except KeyboardInterrupt:
    sys.exit(1)

  dirname = tempfile.mkdtemp()
  try:
    main(dirname)
  finally:
    subprocess.check_call(('rm', '-rf', dirname))
