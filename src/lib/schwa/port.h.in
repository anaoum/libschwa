/* -*- Mode: C++; indent-tabs-mode: nil -*- */
#ifndef SCHWA_PORT_H_
#define SCHWA_PORT_H_

#include <string>
#include <vector>

#include <@ENDIAN_CONVERSION_HEADER@>

#include <schwa/_base.h>


namespace schwa {
  namespace port {

    extern const char *BOLD;
    extern const char *DARK_GREY;
    extern const char *OFF;
    extern const char *RED;

    /**
     * Attempts to return a more meaningful version of a typeid name.
     **/
    std::string demangle_typeid(const char *typeid_name);

    /**
     * If the functionality is available, and the provided ostream is stdout, fork and exec to make
     * the stdout a pager. Returns whether or not this occurred.
     *
     * Warning: if successful, this function most likely forks.
     **/
    bool make_stdout_pager(std::ostream &out);

    inline uint16_t h_to_be16(const uint16_t x) { return @ENDIAN_CONVERSION_H_TO_BE16@(x); }
    inline uint32_t h_to_be32(const uint32_t x) { return @ENDIAN_CONVERSION_H_TO_BE32@(x); }
    inline uint64_t h_to_be64(const uint64_t x) { return @ENDIAN_CONVERSION_H_TO_BE64@(x); }
    inline uint16_t be16_to_h(const uint16_t x) { return @ENDIAN_CONVERSION_BE16_TO_H@(x); }
    inline uint32_t be32_to_h(const uint32_t x) { return @ENDIAN_CONVERSION_BE32_TO_H@(x); }
    inline uint64_t be64_to_h(const uint64_t x) { return @ENDIAN_CONVERSION_BE64_TO_H@(x); }
  }
}

#endif  // SCHWA_PORT_H_
