// ============================================================================
// This file was automatically generated by src/scripts/extract-unicode-data.py.
// Do not modify it directly.
// ============================================================================
#ifndef SCHWA_UNICODE_GEN_H
#define SCHWA_UNICODE_GEN_H

namespace schwa {
  namespace unicode {

    enum class CategoryName : uint8_t {
        Cc = 1,
        Cf = 17,
        Cn = 0,
        Co = 29,
        Cs = 28,
        Ll = 13,
        Lm = 21,
        Lo = 15,
        Lt = 20,
        Lu = 10,
        Mc = 24,
        Me = 23,
        Mn = 22,
        Nd = 9,
        Nl = 25,
        No = 18,
        Pc = 12,
        Pd = 8,
        Pe = 6,
        Pf = 19,
        Pi = 16,
        Po = 3,
        Ps = 5,
        Sc = 4,
        Sk = 11,
        Sm = 7,
        So = 14,
        Zl = 26,
        Zp = 27,
        Zs = 2,
    };
    const char *get_category_name(CategoryName v);

    enum class BidiClassName : uint8_t {
        AL = 13,
        AN = 12,
        B = 2,
        BN = 0,
        CS = 7,
        EN = 8,
        ES = 6,
        ET = 5,
        FSI = 21,
        L = 9,
        LRE = 14,
        LRI = 19,
        LRO = 17,
        NSM = 10,
        ON = 4,
        PDF = 16,
        PDI = 22,
        R = 11,
        RLE = 15,
        RLI = 20,
        RLO = 18,
        S = 1,
        WS = 3,
    };
    const char *get_bidi_class_name(BidiClassName v);

    enum class EastAsianWidthName : uint8_t {
        A = 2,
        F = 5,
        H = 4,
        N = 0,
        Na = 1,
        W = 3,
    };
    const char *get_east_asian_width_name(EastAsianWidthName v);

    bool is_alpha(unicode_t code_point);
    bool is_cased(unicode_t code_point);
    bool is_case_ignorable(unicode_t code_point);
    bool is_decimal(unicode_t code_point);
    bool is_digit(unicode_t code_point);
    bool is_lower(unicode_t code_point);
    bool is_numeric(unicode_t code_point);
    bool is_printable(unicode_t code_point);
    bool is_space(unicode_t code_point);
    bool is_title(unicode_t code_point);
    bool is_upper(unicode_t code_point);
    bool is_xid_continue(unicode_t code_point);
    bool is_xid_start(unicode_t code_point);
    inline bool is_alnum(const unicode_t c) { return is_alpha(c) || is_decimal(c) || is_digit(c) || is_numeric(c); }

    BidiClassName get_bidi_class(unicode_t code_point);
    CategoryName get_category(unicode_t code_point);
    uint8_t get_combining(unicode_t code_point);
    EastAsianWidthName get_east_asian_width(unicode_t code_point);
    bool is_mirrored(unicode_t code_point);

    uint8_t get_decimal(unicode_t code_point);
    uint8_t get_digit(unicode_t code_point);
    double get_numeric(unicode_t code_point);

    size_t to_lower(unicode_t code_point, unicode_t code_points[3]);
    size_t to_title(unicode_t code_point, unicode_t code_points[3]);
    size_t to_upper(unicode_t code_point, unicode_t code_points[3]);

  }
}

#endif  // SCHWA_UNICODE_GEN_H
